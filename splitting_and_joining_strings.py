# -*- coding: utf-8 -*-
"""Splitting and Joining Strings

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ogYoIlTHrCQwa2K-mbGnXjjlQRkwbOVA

#  Splitting and Joining Strings 

## Table of contents
* [Create an array of ten strings](#a)
* [ Write a program to join and split these strings](#b) 
* [Use tuple, dictionary, and set](#c)
"""

def main():
    print("Splitting and Joining Strings")
    print('\n')
    try:
        
        import numpy as np
        
        arr_text = np.array(['My', 'name', 'is', 'Abdulaziz', 'and', 'I', 'want', 'to', 'be', 'a', 'Data', 'Scientist'])
        print(f'An array of strings: {arr_text}')
        print(f'Object type: {type(arr_text)}')
        print('\n')
        # Join the strings
        join_text = ' '.join(arr_text)
        print(f'Joined strings of the array: {join_text}')
        print(f'Object type: {type(join_text)}')
        print('\n')
        # split the strings
        split_text = join_text.split(' ')
        print(f'The splitted text: {split_text}')
        print(f'Object type: {type(split_text)}')

    except FileNotFoundError:
        # a message code if file not exist
        print('Python file not exist')

if __name__ == "__main__":
    main()

"""<a id='a'></a>

#### Create an array of ten strings
"""

import numpy as np

arr_text = np.array(['My', 'name', 'is', 'Abdulaziz', 'and', 'I', 'want', 'to','be', 'a' ,'Data' ,'Scientist'])
print(f'An array of strings: {arr_text}')
print(f'Object type: {type(arr_text)}')

"""<a id='b'></a>

#### Write a program to join and split these strings
"""

join_text = ' '.join(arr_text)
print(f'Joined strings of the array: {join_text}')
print(f'Object type: {type(join_text)}')

split_text = join_text.split(' ')
print(f'The splitted text: {split_text}')
print(f'Object type: {type(split_text)}')

"""<a id='c'></a>

####  Use tuple, dictionary, and set
"""

tuple_text = ('This', 'is', 'the', 'tuple', 'example')
print(f'The set of strings: {tuple_text}')
print(f'Object type: {type(tuple_text)}')

tuple_join = ' '.join(tuple_text)
print(f'Joined strings of the dictionary: {tuple_join}')
print(f'Object type: {type(tuple_join)}')

dict_text = {1:'This', 2:'is', 3:'the', 4:'dictionary', 5:'example'}
print(f'The dictionary of strings: {dict_text}')
print(f'Object type: {type(dict_text)}')

dict_join = ' '.join(i for i in dict_text.values())
print(f'Joined strings of the dictionary: {dict_join}')
print(f'Object type: {type(dict_join)}')

set_text = {'This', 'is', 'the', 'set', 'example'}
print(f'The set of strings: {set_text}')
print(f'Object type: {type(set_text)}')

set_join = ' '.join(set_text)
print(f'Joined strings of the dictionary: {set_join}')
print(f'Object type: {type(set_join)}')